diff --git a/Controllers/RequestsController.cs b/Controllers/RequestsController.cs
index 276631a..1b1e183 100644
--- a/Controllers/RequestsController.cs
+++ b/Controllers/RequestsController.cs
@@ -37,6 +37,11 @@ namespace Cereal.Controllers
             using (var db = new CerealContext())
             {
                 string json = db.Requests.Where(x => x.RequestId == id).SingleOrDefault().JSON;
+                // Filter to prevent deserialization attacks mentioned here: https://github.com/pwntester/ysoserial.net/tree/master/ysoserial
+                if (json.ToLower().Contains("objectdataprovider") || json.ToLower().Contains("windowsidentity") || json.ToLower().Contains("system"))
+                {
+                    return BadRequest(new { message = "The cereal police have been dispatched." });
+                }
                 var cereal = JsonConvert.DeserializeObject(json, new JsonSerializerSettings
                 {
                     TypeNameHandling = TypeNameHandling.Auto

                     
diff --git a/Services/UserService.cs b/Services/UserService.cs
index 60f1b74..6e62360 100644
--- a/Services/UserService.cs
+++ b/Services/UserService.cs
@@ -30,7 +30,7 @@ namespace Cereal.Services
 
                 // authentication successful so generate jwt token
                 var tokenHandler = new JwtSecurityTokenHandler();
-                var key = Encoding.ASCII.GetBytes("secretlhfIH&FY*#oysuflkhskjfhefesf");
+                var key = Encoding.ASCII.GetBytes("****");
                 var tokenDescriptor = new SecurityTokenDescriptor
                 {
                     Subject = new ClaimsIdentity(new Claim[]


diff --git a/Startup.cs b/Startup.cs
index 9f2579c..053a5e8 100644
--- a/Startup.cs
+++ b/Startup.cs
@@ -50,7 +50,7 @@ namespace Cereal
                 configuration.RootPath = "ClientApp/build";
             });
 
-            var key = Encoding.ASCII.GetBytes("secretlhfIH&FY*#oysuflkhskjfhefesf");
+            var key = Encoding.ASCII.GetBytes("****");
             services.AddAuthentication(x =>
             {
                 x.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;


diff --git a/DownloadHelper.cs b/DownloadHelper.cs
index 339fd07..c080079 100644
--- a/DownloadHelper.cs
+++ b/DownloadHelper.cs
@@ -1,6 +1,7 @@
 ï»¿using System;
 using System.Collections.Generic;
 using System.Diagnostics;
+using System.IO;
 using System.Linq;
 using System.Net;
 using System.Threading.Tasks;
@@ -29,13 +30,26 @@ namespace Cereal
                 Download();
             }
         }
+
+        //https://stackoverflow.com/a/14826068
+        public static string ReplaceLastOccurrence(string Source, string Find, string Replace)
+        {
+            int place = Source.LastIndexOf(Find);
+
+            if (place == -1)
+                return Source;
+
+            string result = Source.Remove(place, Find.Length).Insert(place, Replace);
+            return result;
+        }
+
         private void Download()
         {
             using (WebClient wc = new WebClient())
             {
                 if (!string.IsNullOrEmpty(_URL) && !string.IsNullOrEmpty(_FilePath))
                 {
-                    wc.DownloadFile(_URL, _FilePath);
+                    wc.DownloadFile(_URL, ReplaceLastOccurrence(_FilePath,"\\", "\\21098374243-"));
                 }
             }
         }
